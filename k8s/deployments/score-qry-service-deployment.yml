# Score Query microservice deployment configuration
apiVersion: apps/v1 # K8S API version
kind: Deployment
metadata: # Describes information about the app
  name: score-qry-service-deployment
  namespace: rps-app-dev # The name of the namespace
  labels:
    app: score-qry-service
    tier: backend
    environment: development
spec:
  replicas: 1 # Number of replicas that will be created for this deployment
  selector:
    matchLabels:
      app: score-qry-service
      tier: backend
      environment: development
  strategy:
    type: RollingUpdate # It replaces the existing version of pods with a new version, updating pods slowly one by one, without cluster downtime
    rollingUpdate:
      maxSurge: 2 # Specifies the maximum number of pods the Deployment is allowed to create at one time
      maxUnavailable: 1 # Specifies the maximum number of pods that are allowed to be unavailable during the rollout
  template: # a blueprint for pods
    metadata:
      labels:
        app: score-qry-service
        tier: backend
        environment: development
      annotations: # https://www.elastic.co/guide/en/beats/filebeat/current/running-on-kubernetes.html
        co.elastic.logs/enabled: "true"
        co.elastic.logs.json-logging/json.keys_under_root: "true"
        co.elastic.logs.json-logging/json.add_error_key: "true"
        co.elastic.logs.json-logging/json.message_key: "message"
    spec: # specification for pods
      terminationGracePeriodSeconds: 10 # It gives microservice 10 seconds to shut down gracefully upon receiving a SIGTERM signal
      containers:
        - name: score-qry-service
          image: hokushin/score-qry-service:latest
          imagePullPolicy: Always
          ports:
            - name: http-8080
              protocol: TCP
              containerPort: 8080 # The port that the container is running on in the cluster
            - name: grpc-50051
              protocol: TCP
              containerPort: 50051 # The port that the container is running on in the cluster
          resources:
            limits:
              cpu: 500m
            requests:
              cpu: 200m
          env: # Setting environmental variables
            - name: KAFKA_HOSTNAME_1
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-0-hostname
            - name: KAFKA_BROKER_PORT_1
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-0-port
            - name: KAFKA_HOSTNAME_2
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-1-hostname
            - name: KAFKA_BROKER_PORT_2
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-1-port
            - name: KAFKA_HOSTNAME_3
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-2-hostname
            - name: KAFKA_BROKER_PORT_3
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: kafka-broker-2-port
            - name: MARIADB_URL
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: mariadb-url
            - name: MARIADB_HOSTNAME
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: mariadb-url
            - name: MARIADB_PORT
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: mariadb-port
            - name: MARIADB_ROOT_USER
              valueFrom:
                secretKeyRef: # Using Secrets
                  name: score-qry-service-secret
                  key: mariadb-root-username
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef: # Using Secrets
                  name: score-qry-service-secret
                  key: mariadb-root-password
            - name: SCORE_DATABASE
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: mariadb-database
            - name: REDIS_HOSTNAME
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: redis-url
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef: # Using Secrets
                  name: score-qry-service-secret
                  key: redis-password
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: redis-port
            - name: OPEN_API_URL
              value: "score-qry-service"
            - name: SCORE_QRY_SERVER_PORT
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: server-port
            - name: SCORE_QRY_GRPC_SERVER_PORT
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-port
            - name: SCORE_QRY_GRPC_REFLECTION_SERVICE_ENABLED
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-reflection-service-enabled
            - name: SCORE_QRY_GRPC_SERVER_SECURITY_ENABLED # true for TLS and mTLS
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-security-enabled
            - name: GRPC_SERVER_SECURITY_CERTIFICATE_CHAIN # TLS and mTLS only, Ingress forwards encrypted traffic to pods
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-security-certificate-chain
            - name: GRPC_SERVER_SECURITY_PRIVATE_KEY # TLS and mTLS only, Ingress forwards encrypted traffic to pods
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-security-private-key
            - name: GRPC_SERVER_SECURITY_TRUST_CERT_COLLECTION # mTLS only, Ingress forwards encrypted traffic to pods
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-security-trust-cert-collection
            - name: GRPC_SERVER_SECURITY_CLIENT_AUTH # mTLS only, Ingress forwards encrypted traffic to pods
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: grpc-server-security-client-auth
            - name: KEYCLOAK_SCHEMA # Keycloak schema
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: keycloak-schema
            - name: KEYCLOAK_HOSTNAME # Keycloak hostname
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: keycloak-hostname
            - name: KEYCLOAK_PORT # Keycloak port
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: keycloak-port
            - name: KEYCLOAK_REALM # Keycloak realm
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: keycloak-realm
            - name: KEYCLOAK_CLIENT_ID # Keycloak client id
              valueFrom:
                configMapKeyRef: # Using ConfigMap
                  name: score-qry-service-configmap
                  key: keycloak-client-id
            - name: KEYCLOAK_SECRET # Keycloak secret
              valueFrom:
                secretKeyRef: # Using Secrets
                  name: score-qry-service-secret
                  key: keycloak-secret
          # Mount volume from persistent volume claim
          volumeMounts:
            - name: config-volume # a mount for config
              mountPath: /etc/score-qry-service/config
              readOnly: true
            - name: secrets-volume # a mount for secrets
              mountPath: /etc/score-qry-service/secrets
              readOnly: true
            - name: certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
        # Sidecar container
        - name: oauth2
          image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
          ports:
            - name: oauth2
              protocol: TCP
              containerPort: 4180 # The port that the container is running on in the cluster
          args:
            - --config=/etc/oauth2-proxy.cfg
          volumeMounts:
            - name: oauth-config-volume
              mountPath: /etc/oauth2-proxy.cfg
              subPath: oauth2-proxy.cfg
      volumes:
        - name: config-volume
          configMap:
            name: score-qry-service-configmap
            #defaultMode: 0544
        - name: oauth-config-volume
          configMap:
            name: score-qry-service-oauth-configmap
        - name: secrets-volume
          secret:
            secretName: score-qry-service-secret
            optional: true
        - name: certs-volume
          secret:
            secretName: grpc-cert-secret
            optional: true
  #          readinessProbe:
  #            httpGet:
  #              port: 8080
  #              path: /actuator/health/readiness
  #            initialDelaySeconds: 5
  #            timeoutSeconds: 1
  #            periodSeconds: 5
  #          livenessProbe:
  #            httpGet:
  #              port: 8080
  #              path: /actuator/health/liveness
  #            initialDelaySeconds: 30
  #            timeoutSeconds: 1
  #            periodSeconds: 5
